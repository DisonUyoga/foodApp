Creating a pizza delivery app involves integrating a variety of features to ensure a seamless and enjoyable experience for users. Below are the main features to consider for a pizza delivery app, covering essential functionalities from user interface design to backend support.

### User Interface and User Experience (UI/UX)

1. **User Authentication and Profile Management**:
   - Sign up and login options (email, phone, social media)
   - User profile management (name, address, payment details)
   - Password reset functionality

2. **Restaurant and Menu Browsing**:
   - List of available pizza outlets
   - Detailed menu with pizza descriptions, prices, and images
   - Search and filter options (by type, size, price, etc.)
   - Option to view previous orders and re-order

3. **Customizable Orders**:
   - Pizza customization (size, crust type, toppings)
   - Real-time price updates based on selections
   - Option to add notes or special instructions

4. **Shopping Cart and Checkout**:
   - Easy-to-use shopping cart interface
   - Multiple payment options (credit/debit card, PayPal, digital wallets)
   - Promo codes and discounts
   - Order summary and confirmation

5. **Order Tracking**:
   - Real-time order status updates (preparing, out for delivery, delivered)
   - GPS tracking of delivery personnel
   - Estimated delivery time

6. **Notifications**:
   - Push notifications for order confirmation, status updates, and promotions
   - In-app notifications for real-time updates

### Backend and Functionalities

1. **Geolocation and Mapping**:
   - Integration with Google Maps or Mapbox for location selection and delivery tracking
   - Address autocomplete and validation

2. **Payment Gateway Integration**:
   - Secure payment processing using Stripe, PayPal, or other gateways
   - Handling of payment failures and retries

3. **Order Management System**:
   - Backend system for handling order placements, cancellations, and modifications
   - Real-time update of order status for both users and restaurant staff

4. **Inventory Management**:
   - Real-time inventory updates to avoid ordering out-of-stock items
   - Automatic notifications to restock popular items

5. **Customer Support**:
   - In-app chat support or chatbot for instant assistance
   - Contact options (email, phone)

6. **Analytics and Reporting**:
   - User activity tracking and analytics (popular items, peak order times)
   - Sales reports and inventory reports for restaurant management

### Advanced Features

1. **Loyalty Programs and Rewards**:
   - Points system for repeat customers
   - Rewards and discounts for loyal customers
   - Referral programs

2. **Multilingual Support**:
   - Support for multiple languages to cater to a diverse user base

3. **Multi-Currency Support**:
   - Handling multiple currencies for international users

4. **Reviews and Ratings**:
   - Option for users to rate and review pizzas and delivery service
   - Display of ratings and reviews for other users to see

5. **Social Media Integration**:
   - Sharing orders or experiences on social media platforms
   - Logging in via social media accounts

### Example Code Snippets

#### Geolocation and Mapping using Expo and Google Maps API:
```javascript
import * as Location from 'expo-location';
import MapView, { Marker } from 'react-native-maps';
import React, { useState, useEffect } from 'react';

const PizzaDeliveryMap = () => {
  const [location, setLocation] = useState(null);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    })();
  }, []);

  return (
    <MapView
      style={{ flex: 1 }}
      region={{
        latitude: location?.coords.latitude || 37.78825,
        longitude: location?.coords.longitude || -122.4324,
        latitudeDelta: 0.0922,
        longitudeDelta: 0.0421,
      }}>
      {location && (
        <Marker
          coordinate={{ latitude: location.coords.latitude, longitude: location.coords.longitude }}
          title="Your Location"
        />
      )}
    </MapView>
  );
};

export default PizzaDeliveryMap;
```

#### Push Notifications with Expo:
```javascript
import * as Notifications from 'expo-notifications';
import * as Permissions from 'expo-permissions';
import React, { useState, useEffect } from 'react';

const PizzaDeliveryNotifications = () => {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [notification, setNotification] = useState(false);
  const notificationListener = useRef();
  const responseListener = useRef();

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));

    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      
    });

    return () => {
      Notifications.removeNotificationSubscription(notificationListener.current);
      Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    // Your component code
  );9/8

  
};

async function registerForPushNotificationsAsync() {
  let token;
  const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);
  let finalStatus = existingStatus;

  if (existingStatus !== 'granted') {
    const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);
    finalStatus = status;
  }

  if (finalStatus !== 'granted') {
    alert('Failed to get push token for push notification!');
    return;
  }

  token = (await Notifications.getExpoPushTokenAsync()).data;
  console.log(token);
  return token;
}

export default PizzaDeliveryNotifications;
```

These features and snippets will help you build a comprehensive pizza delivery app, ensuring a smooth and efficient experience for both users and restaurant staff.


 if (authLoading) {
    return <Loading />;
  }
  if (!session) {
    return <Redirect href={"/sign-in"} />;
  }
  if (!isAdmin) {
    return <Redirect href={"/user/menu"} />;
  }



  module.exports = {
  preset: "jest-expo",
  setupFiles: ["./jest.setup.js"],
  setupFilesAfterEnv: ["@testing-library/jest-native/extend-expect"],
  transform: {
    "^.+\\.[jt]sx?$": "babel-jest",
  },
  transformIgnorePatterns: [
    "node_modules/(?!(jest-)?react-native|@react-native|react-navigation|@react-navigation|@unimodules)",
  ],
};



To customize the Android build process for an Expo project and include specific npm install flags such as `--force` or `--legacy-peer-deps`, you'll need to configure the build process using a custom `eas.json` file and possibly customize the build scripts. Here's how you can achieve this:

### Step 1: Set Up EAS Build
Ensure you have EAS CLI installed and your project configured for EAS builds:

```bash
npm install -g eas-cli
# or
yarn global add eas-cli

eas build:configure
```

### Step 2: Create or Edit `eas.json`
The `eas.json` file allows you to define build profiles and custom build steps. You will add a custom build script to modify the dependency installation process.

1. **Create or edit the `eas.json` file in your project root**:

```json
{
  "build": {
    "production": {
      "env": {
        "EXPO_USE_LEGACY_WORKFLOW": "1"
      },
      "android": {
        "buildType": "apk",
        "developmentClient": false,
        "gradleCommand": ":app:assembleRelease",
        "node": "14.17.0"
      },
      "dependencies": ["expo", "react-native"]
    }
  }
}
```

2. **Add custom build steps** in your `eas.json`:

```json
{
  "build": {
    "production": {
      "env": {
        "EXPO_USE_LEGACY_WORKFLOW": "1"
      },
      "android": {
        "buildType": "apk",
        "developmentClient": false,
        "gradleCommand": ":app:assembleRelease",
        "node": "14.17.0"
      },
      "dependencies": ["expo", "react-native"],
      "hooks": {
        "post-install": "node ./scripts/custom-install.js"
      }
    }
  }
}
```

### Step 3: Create Custom Install Script
Create a custom install script that runs with the desired npm flags.

1. **Create a `scripts` directory in your project root** (if it doesn't exist):

```bash
mkdir scripts
```

2. **Create a `custom-install.js` file in the `scripts` directory**:

```javascript
const { execSync } = require('child_process');

try {
  console.log('Running custom npm install with --legacy-peer-deps...');
  execSync('npm install --force or --legacy-peer-deps', { stdio: 'inherit' });
  console.log('Custom npm install completed.');
} catch (error) {
  console.error('Error during custom npm install:', error);
  process.exit(1);
}
```

3. **Make sure the script is executable** (if you're on a Unix-like system):

```bash
chmod +x scripts/custom-install.js
```

### Step 4: Build Your Project
Run the build command with EAS:

```bash
eas build --platform android
```

This will use the custom install script during the build process to install dependencies with the `--legacy-peer-deps` flag.

### Summary
Hereâ€™s a concise step-by-step guide:

1. **Install EAS CLI and configure EAS build**:
    ```bash
    npm install -g eas-cli
    # or
    yarn global add eas-cli
    eas build:configure
    ```

2. **Create or edit `eas.json` in your project root** to include custom build steps:
    ```json
    {
      "build": {
        "production": {
          "env": {
            "EXPO_USE_LEGACY_WORKFLOW": "1"
          },
          "android": {
            "buildType": "apk",
            "developmentClient": false,
            "gradleCommand": ":app:assembleRelease",
            "node": "14.17.0"
          },
          "dependencies": ["expo", "react-native"],
          "hooks": {
            "post-install": "node ./scripts/custom-install.js"
          }
        }
      }
    }
    ```

3. **Create a `scripts/custom-install.js` file** with the following content:
    ```javascript
    const { execSync } = require('child_process');

    try {
      console.log('Running custom npm install with --legacy-peer-deps...');
      execSync('npm install --legacy-peer-deps', { stdio: 'inherit' });
      console.log('Custom npm install completed.');
    } catch (error) {
      console.error('Error during custom npm install:', error);
      process.exit(1);
    }
    ```

4. **Build your project**:
    ```bash
    eas build --platform android
    ```

By following these steps, you can customize the Android build process in Expo to include specific npm install flags during the dependency installation phase.



{
  "cli": {
    "version": ">= 10.0.2"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "production": {
      "android": {
        "buildType": "apk"
      },
      "env": {
        "EXPO_PUBLIC_SUPABASE_URL": "https://opntentcsoganyijdqrd.supabase.co",
        "EXPO_PUBLIC_SUPABASE_ANON": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9wbnRlbnRjc29nYW55aWpkcXJkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTgxMjM0NjYsImV4cCI6MjAzMzY5OTQ2Nn0.h2N_WmjXhxYrdRaDzb1UlStUWbNp3NnFL3_A2FVdV7M",
        "EXPO_PUBLIC_PROJECTID": "38e6f5e3-9701-48e4-bba1-9cad3e725f82",
        "EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY": "pk_test_51NSwr0JPAJGC0l3DBoyNsfXu1fquC20Pg8yB3BzI2FBGCULxzsTNJjTlkylR0qjaBgNTto6CF6b31A31qc3q2nWL006Iu0l9zT",
        "STRIPE_SECRET_KEY": "sk_test_51NSwr0JPAJGC0l3Dp59zsCplzQOTn0SQgTXueeZ1B1IJQHGfWX6vcbQ8S0lJJ32fOWd1tmIe0DCZz30LJwaaY08D00ZXxAA8Ge",
        "EXPO_PUBLIC_ALGOLIA_APP_ID": "NP2UESVIFR",
        "EXPO_PUBLIC_ALGOLIA_API_KEY": "4c83c5638466aa7dc80a00a9995b9a7c"
      }
    }
  },
  "submit": {
    "production": {}
  }
}
